
Serial_Port.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000012e  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000898  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000788  00000000  00000000  00000b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000037a  00000000  00000000  000012a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  0000161c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a9  00000000  00000000  000016d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000129  00000000  00000000  00001a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001ba6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e2       	ldi	r30, 0x2E	; 46
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
//#define BAUD_PRESCALE (((F_CPU / (BAUD * 16UL))) - 1)

unsigned char UART_RxChar();

int main()
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	00 d0       	rcall	.+0      	; 0x9c <main+0x6>
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
	char *data;
	
	uart_init();
  a0:	0e 94 5f 00 	call	0xbe	; 0xbe <uart_init>
	uart_sendstring("Hallo");
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	91 e0       	ldi	r25, 0x01	; 1
  a8:	0e 94 81 00 	call	0x102	; 0x102 <uart_sendstring>
	while(1)
	{
		uart_getc(&data);
  ac:	ce 01       	movw	r24, r28
  ae:	01 96       	adiw	r24, 0x01	; 1
  b0:	0e 94 6f 00 	call	0xde	; 0xde <uart_getc>
		uart_putc(&data);
  b4:	ce 01       	movw	r24, r28
  b6:	01 96       	adiw	r24, 0x01	; 1
  b8:	0e 94 78 00 	call	0xf0	; 0xf0 <uart_putc>
  bc:	f7 cf       	rjmp	.-18     	; 0xac <main+0x16>

000000be <uart_init>:
#define BAUD_PRESCALE (((F_CPU / (BAUDRATE * 16UL))) - 1)


void uart_init()
{
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
  be:	e1 ec       	ldi	r30, 0xC1	; 193
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	88 61       	ori	r24, 0x18	; 24
  c6:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);
  c8:	e2 ec       	ldi	r30, 0xC2	; 194
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	86 60       	ori	r24, 0x06	; 6
  d0:	80 83       	st	Z, r24
	UBRR0L = BAUD_PRESCALE;
  d2:	87 e6       	ldi	r24, 0x67	; 103
  d4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UBRR0H = (BAUD_PRESCALE >> 8);
  d8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  dc:	08 95       	ret

000000de <uart_getc>:
}

char uart_getc(char *data){
  de:	fc 01       	movw	r30, r24
	
	while((UCSR0A & (1<<RXC0)) == 0);
  e0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  e4:	99 23       	and	r25, r25
  e6:	e4 f7       	brge	.-8      	; 0xe0 <uart_getc+0x2>
	*data = UDR0;
  e8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  ec:	80 83       	st	Z, r24
	return *data;
}
  ee:	08 95       	ret

000000f0 <uart_putc>:

void uart_putc(char *data){
  f0:	fc 01       	movw	r30, r24
	while((UCSR0A & (1<<UDRE0)) == 0);
  f2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  f6:	95 ff       	sbrs	r25, 5
  f8:	fc cf       	rjmp	.-8      	; 0xf2 <uart_putc+0x2>
	UDR0 = *data;
  fa:	80 81       	ld	r24, Z
  fc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 100:	08 95       	ret

00000102 <uart_sendstring>:
}

void uart_sendstring(char *str)
{
 102:	0f 93       	push	r16
 104:	1f 93       	push	r17
 106:	cf 93       	push	r28
 108:	8c 01       	movw	r16, r24
	unsigned char j=0;
 10a:	c0 e0       	ldi	r28, 0x00	; 0

	while (str[j]!=0)
 10c:	03 c0       	rjmp	.+6      	; 0x114 <uart_sendstring+0x12>
	{
		uart_putc(&str[j]);
 10e:	0e 94 78 00 	call	0xf0	; 0xf0 <uart_putc>
		j++;
 112:	cf 5f       	subi	r28, 0xFF	; 255

void uart_sendstring(char *str)
{
	unsigned char j=0;

	while (str[j]!=0)
 114:	c8 01       	movw	r24, r16
 116:	8c 0f       	add	r24, r28
 118:	91 1d       	adc	r25, r1
 11a:	fc 01       	movw	r30, r24
 11c:	20 81       	ld	r18, Z
 11e:	21 11       	cpse	r18, r1
 120:	f6 cf       	rjmp	.-20     	; 0x10e <uart_sendstring+0xc>
	{
		uart_putc(&str[j]);
		j++;
	}
 122:	cf 91       	pop	r28
 124:	1f 91       	pop	r17
 126:	0f 91       	pop	r16
 128:	08 95       	ret

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
