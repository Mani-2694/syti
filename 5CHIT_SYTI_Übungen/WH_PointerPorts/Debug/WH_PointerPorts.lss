
WH_PointerPorts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000846  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000747  00000000  00000000  00000a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f4  00000000  00000000  00001191  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001488  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cf  00000000  00000000  000014f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000dc  00000000  00000000  000018bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000199b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  78:	0c 94 79 00 	jmp	0xf2	; 0xf2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Init>:

#include "LedOut.h"

void Init()
{
	DDRD = 0xFF;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;
  84:	84 b9       	out	0x04, r24	; 4
  86:	08 95       	ret

00000088 <changeLED>:
}

void changeLED(char *leds, int length)
{	
  88:	ac 01       	movw	r20, r24
	for(int i = 0; i<length;i++)
  8a:	20 e0       	ldi	r18, 0x00	; 0
  8c:	30 e0       	ldi	r19, 0x00	; 0
  8e:	18 c0       	rjmp	.+48     	; 0xc0 <changeLED+0x38>
	{
		PORTD = (leds[i]<<2);
  90:	fa 01       	movw	r30, r20
  92:	e2 0f       	add	r30, r18
  94:	f3 1f       	adc	r31, r19
  96:	90 81       	ld	r25, Z
  98:	99 0f       	add	r25, r25
  9a:	99 0f       	add	r25, r25
  9c:	9b b9       	out	0x0b, r25	; 11
		PORTB = (leds[i]>>6);
  9e:	90 81       	ld	r25, Z
  a0:	92 95       	swap	r25
  a2:	96 95       	lsr	r25
  a4:	96 95       	lsr	r25
  a6:	93 70       	andi	r25, 0x03	; 3
  a8:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	8f e7       	ldi	r24, 0x7F	; 127
  ac:	94 e8       	ldi	r25, 0x84	; 132
  ae:	ee e1       	ldi	r30, 0x1E	; 30
  b0:	81 50       	subi	r24, 0x01	; 1
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e0 40       	sbci	r30, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <changeLED+0x28>
  b8:	00 c0       	rjmp	.+0      	; 0xba <changeLED+0x32>
  ba:	00 00       	nop
	DDRB = 0xFF;
}

void changeLED(char *leds, int length)
{	
	for(int i = 0; i<length;i++)
  bc:	2f 5f       	subi	r18, 0xFF	; 255
  be:	3f 4f       	sbci	r19, 0xFF	; 255
  c0:	26 17       	cp	r18, r22
  c2:	37 07       	cpc	r19, r23
  c4:	2c f3       	brlt	.-54     	; 0x90 <changeLED+0x8>
	{
		PORTD = (leds[i]<<2);
		PORTB = (leds[i]>>6);
		_delay_ms(10000);
	}
  c6:	08 95       	ret

000000c8 <main>:
#define F_CPU 16000000 //Taktfrequenz der CPU
#include "LedOut.h"


int main(void)
{	
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	00 d0       	rcall	.+0      	; 0xce <main+0x6>
  ce:	1f 92       	push	r1
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
	Init();
  d4:	0e 94 40 00 	call	0x80	; 0x80 <Init>
	// A ist ein Char und ist in binär 0010 0001
	char leds[] = {'A','B',0b10000000}; 
  d8:	81 e4       	ldi	r24, 0x41	; 65
  da:	89 83       	std	Y+1, r24	; 0x01
  dc:	82 e4       	ldi	r24, 0x42	; 66
  de:	8a 83       	std	Y+2, r24	; 0x02
  e0:	80 e8       	ldi	r24, 0x80	; 128
  e2:	8b 83       	std	Y+3, r24	; 0x03

	while(1)
	{
		changeLED(leds,3);
  e4:	63 e0       	ldi	r22, 0x03	; 3
  e6:	70 e0       	ldi	r23, 0x00	; 0
  e8:	ce 01       	movw	r24, r28
  ea:	01 96       	adiw	r24, 0x01	; 1
  ec:	0e 94 44 00 	call	0x88	; 0x88 <changeLED>
  f0:	f9 cf       	rjmp	.-14     	; 0xe4 <main+0x1c>

000000f2 <_exit>:
  f2:	f8 94       	cli

000000f4 <__stop_program>:
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <__stop_program>
